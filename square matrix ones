def square_matrix_ones(matrix):
    if not matrix:
        return 0
    
    n = len(matrix)
    m = len(matrix[0])
    dp = [[0] * m for _ in range(n)]
    max_size = 0
    for i in range(n):
        dp[i][0] = matrix[i][0]
        max_size = max(max_size, dp[i][0])
    
    for j in range(m):
        dp[0][j] = matrix[0][j]
        max_size = max(max_size, dp[0][j])
    for i in range(1, n):
        for j in range(1, m):
            if matrix[i][j] == 1:
                dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1]) + 1
                max_size = max(max_size, dp[i][j])
            else:
                dp[i][j] = 0 
    return max_size * max_size 
matrix = [
    [1, 0, 1, 0, 0],
    [1, 0, 1, 1, 1],
    [1, 1, 1, 1, 1],
    [1, 0, 0, 1, 0]
]

print(square_matrix_ones(matrix)) 
 # Output
 # #4 
